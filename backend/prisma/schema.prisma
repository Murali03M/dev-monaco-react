// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  name        String
  skillLevel  SkillLevel
  interests   String[]
  challenges  UserChallengeProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isAdmin Boolean @default(false)

}

model Challenge {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  category     Category
  tags         String[]
  progress     UserChallengeProgress[] @relation("ChallengeToProgress")
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  testCases     TestCase[]
}

model UserChallengeProgress {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  challenge   Challenge  @relation(fields: [challengeId], references: [id], name: "ChallengeToProgress")
  challengeId String     @db.ObjectId
  status      ProgressStatus
  attempted   Boolean
  solved      Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TestCase {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  input         Json
  expectedOutput Json
  challengeId   String @db.ObjectId
  challenge     Challenge              @relation(fields: [challengeId], references: [id])
}


enum Category {
  EASY
  MEDIUM
  HARD
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProgressStatus {
  ATTEMPTED
  SOLVED
}
